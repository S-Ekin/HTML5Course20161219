1.自定义对象
1.1 内置对象和自定义
在JavaScript语言核心中，对象大致分为两类：内置，自定义
内置对象：Math、Date、Array等等，这些对象天生被JS赋予
很多功能。

Math.random();

自定义对象：JSON。自定义对象就是白纸一样，没有任何默认
功能，需要我们完全自定义
{
    "name": "小明",
    "age": 12,
    "sex": "男"
}

至于document对象，window对象属于DOM和BOM，可以认为是
另外的语言

1.2 对象字面量和双引号问题
我们之前学习的JSON就是JavaScript对象字面量，JSON =
JavaScript Object Notation，Javasciprt对象表示法

{} 对象
[] 数组

javascript中，JSON是更严格的对象字面量，有什么区别 ？
JSON要求所有的键都必须有引号

键名可以没有引号

但是如果你的键不符合标准的命名规范，(数字、字母、下划 、
美元符号，不能以数字开头)的时候，此时必须加引号。

总结：JS中的JSON对象字面量有什么区别？
JSON更严格，要求键名必须有引号。
而对象字面量不需要键名有引号，不过如果不是标准的标签符
也需要加引号。因为JSON是用于数据交换，PHP也能够读取JSON
其他语言需要它有引号。

1.3 什么是对象？
对象就是一组属性的无序集合
对象是一组属性的集合，属性集合在一起了，就是一个对象了。
对象中除了属性，什么都没有。我们强调的是自定义对象
var obj = {
    "name": "max"
}
obj.name

数组是什么？ 数组是值的集合
var arr = ["max", 12, "男", true];
arr[0];

对象可以看作是更牛B的数组，就是把键名也保存的数组

对象是引用类型的，做 == 判断和 === 判断的时候，比较的
内存地址。所以字面量相同的对象也不等：

这是因为字面量相同，但是存储在了内存的不同地址。但是
确实有两个相同的对象，因为属性键，值完全相同。只不过
是两个内存中不同地址的镜像。所以不能 ==

特别的，空对象不等于空对象
{} == {} //false

1.4 对象的方法
如果一对象的属性是一个函数，我们就把这个属性叫做这个对象
的方法。
比如这个对象，有三个普通属性，有一个方法：
    var obj3 = {
        name: "max",
        age: 18,
        sex: "男",
        sayHello: function () {
            console.log("你好");
        }
    }
    obj3.sayHello();

主要就是使用点语法，对象.方法()

如果你是对象.方法()这种语言调用的函数，这个函数里面的
this指的就是这个对象
var obj3 = {
        name: "max",
        age: 18,
        sex: "男",
        sayHello: function () {
            console.log("你好，我叫 " + this.name + ", 我今年" + this.age + '我的性别是' + this.sex);
        }
    }
    obj3.sayHello();

函数里面的this到底是谁，一定要看怎么调用的，而不是怎么
定义的。比如
obj3.sayHello.call(window);
函数里面的this就是window对象

2.函数的this
this的中文叫做“上下文”(context)。函数中的this到底
指什么，不是看定义，而是看调用

函数直接通过圆括号调用的时候，this指的是window对象
function fun() {
        console.log(this);
    }
    fun();
    window.fun();
    // 函数直接调用，this就是window对象

    函数做一个对象的事件处理函数的时候，this指的就是这个
    触发事件的元素。
    function f() {
        console.log(this);
    }
    box.onclick = f();//此时函数中的this就是box对象

    函数如果是被定时器调用了，此时this指的window对象
    function fu() {
        console.log(this);
    }
    setInterval(fu, 1000);


面试题：页面上有一个box, 点击这个box 1秒后之后，这个
box变红。
错误的：
var box = document.getElementById("box");
box.onclick = function(){
    setTimeout(function(){
        this.style.background = "red";
    }, 1000);
}
因为this写在了匿名函数里，这个匿名被定时器调用的，
所以this是window。window没有style属性。所以报错

正确的：

函数如果是一个对象的方法，此时是对象.方法（）调用，
函数中的this是此对象

function fun(){
    console.log(this);
}
var obj = {
    name: "max",
    sayHello: fun //这个属性的值是一个函数，
    //所以这个属性是一个方法
}
obj.sayHello();//对象.方法() this就是对象

//function sayHello(){console.log(this)};
面试题套路，一定要看清楚最终的调用者是谁：
setInterval(obj.sayHello, 1000);
最终调用者是定时器，因为obj没有调用函数，所以this是
window

再比如：
setInterval(function(){
    obj.sayHello();
    console.log(this);
}, 1000);
最终调用者是obj, 所以this是obj

再比如：
var box = document.getElementById("box");
box.onclick = obj.sayHello;
最终调用者是box的单击事件，所以this是box元素

函数可以被call、apply调用，此时可以任意指定this是谁
因为call、apply有两个功能：
1）执行函数
2）函数里面的this是你设置的这个东西

妙用call、apply:
比如，Math对象有一个max方法，可以有任意参数传入，返回
参数中的最大值：

现在要求你利用这个函数，求出一个数组中的最大数字。
var arr = [67, 433, 32, 2, 3456];
此时我们不关心this是谁，而是关心参数列表，用apply执行函数
，把arr当做参数列表传递进去：
Math.max.apply(null, arr);

到这里，我们讲解了5种函数调用的方法，他们的this都不尽相同
下午的时候我们讲第6种调用方式，用new来调用

3、构造函数
3.1 概述
new关键字可以用来调用函数。new可以当做一个“运算符”
function fun() {
    console.log('hello');
}
new fun(); //用new来调用函数

一想到调用函数，就要想到 this 是谁，换句话说，我们
上午学的5种调用函数的方法，实际上都在学他们的this是谁

那么用new来调用函数，this是谁呢？
用new来调用函数的时候，实际上会发生4件事儿：
1） 函数在执行前，会偷偷的创建一个新空对象
2） 把 this 指向这个新创建的空对象
3） 执行函数里面的所有语句
4） 执行完毕最后一条语句之后，会偷偷的把创建的这个对象返回
function fun() {
        this.name = "max";
        this.age = 18;
        this.sex = "男";
    }
    var obj = new fun();
    console.log(obj);
    console.log(obj.name);
    console.log(obj.age);

宏观的看，用new来调用函数，很划算，因为人家送我们
一个对象

此时，我们把函数升级一下，不想让函数返回的对象的值是
固定的，而是我们可以自定义，所以就需要传参：

这3个对象拥有相同的“属性群”，都有name属性，age属性
sex属性，只不过值不一样

new 关键字，可以返回相同属性群的一些对象。所以我们感觉
这个函数此时变得不一样，它是一个创建类似对象的这么一个
函数。它像一个模板，一个加工厂，可以创造类似的一些对象

我们把
1）用new关键字调用的函数，
2）并且目的的是创建相似对象的函数叫做构造函数
这个函数用来构造东西，构造什么？构造一些拥有相同属性
群的对象。

我们人为规定，构造函数的名字，必须首字母大写。暗示其他
程序员这是一个构造函数，不是一个普通函数。它的目的是
创建对象，它必须要用 new 来调用

构造函数完整的写法：
function Person(name, age, sex) {
    this.name = name;
    this.age = age;
    this.sex = sex;
}
var ww = new Person("ww", 18, "男");
var cc = new Person("cc", 19, "男");
var ss = new Person("ss", 17, "男");

构造函数里面的语句没有任何的语法要求！可以写if, 可以写
for, 还可以写闭包。这和Java中的类完全 不同。我们没有
定义“类”， 我们只是在定义一个函数，这个函数用new调用
而已。

类和构造函数：
    其他面向对象的语言比如Java、C++、C#、PHP、Python等
把这个构造函数叫做“类”，并且提供class关键字。
什么是“类”，它描述的是一个蓝图、抽象的概念。所有的人类
都应该有姓名、年龄、性别、称谓、喜欢的颜色。但是不是具体
的某一个人，而是一个蓝图，是抽象的，是结构性的描绘。
    但是JavaScript确实不爱把构造函数叫做“类”。因为
没有严格的语法，函数里面可以执行任何语句，并且确实没有
class关键字（ECMAScript2016增加了这个概念），所以我们
不把Person叫做类，而是叫做构造函数。
    通过new得到的具体的obj1, obj2等，叫做实例。也就是
说他们都是同一个构造函数的实例，也可以叫做同一个类的实例.

实例是具体的，构造函数是抽象的
构造函数是实例的抽象

构造函数能够自己返回一个对象，不用写return, 自动return。
但是如果我们把构造函数人为加上return会怎么样？
面试题：
你就记住了面试题永远都是边边角角，好多坑，永远是工作中
用不到的

比如下面的案例：
如果构造函数显式的return了一个基本类型，那么return语句会
被无视。return的仍然是原先的对象。

如果return一个引用类型值，那么return的东西就是函数返回的
东西，我们创建的新对象不会被返回。

3.2 用构造函数添加方法
一个对象有属性，也要有方法。所谓的方法就是一个值是函数的属性。

function Dog(name, pinzhong, color) {
    this.name = name;
    this.pinzhong = pinzhong;
    this.color = color;
    //创建一个方法
    this.wangwang = function() {
        console.log("我是 " + this.name + "，我是 " + this.pinzhong + "狗，我的颜色是 " + this.color);
    }
}

所以这种创建方法的方法，我们一般工作中不用。我们一般把
方法创建到原型对象上。

4、原型
每一个函数都有一个原型对象，叫做这个函数的 prototype.
当这个函数是一个构造函数的时候，new 出来的东西有一个
__proto__ 也将是这个对象。

原形链查找：当一个对象.属性的时候，如果这个对象身上没有这个
属性，系统会沿着它的__proto__去检索，直到找到这属性。如果找
到了这个对象，能够被打点调用;找不到，就输出undefined

如果对象身上有这个属性，此时将不会进行原形查找

所以，我们就可以把方法定义在原型上！这样的好处就是使用的是同一个函数

今天的理论知识到这儿，总结：
对象就是属性无序集合，如果属性的值是函数，也叫做对象的方法
函数的this是谁，要看怎么调用，而不是定义。
    1.如果是圆括号调用，就是window
    2.如果是定时器调用，就是window
    3.如果是事件处理函数，就是触发事件的那个元素，box
    4.如果是对象打点调用函数（方法），就是这个对象obj
    5.如果是call、apply调用函数，可以自由设置this是谁
    6.如果用new关键字调用函数，this是一个秘密创建的新对象
当一个函数如果用new来调用的时候，会返回一个新对象，这些对象
可以被函数里面的语句赋予属性，所以是某一类的对象。这个函数
叫做构造函数，new出来的内容叫做实例。
    new构造函数的4步走：
    1.秘密的创建一个空对象
    2.设置this为这个对象
    3.执行语句
    4.返回这个对象
构造函数如果有return语句，那么如果是基本数据类型值，会忽略
返回的东西还是秘密创建的对象；
如果是引用类型值，就不返回秘密的对象了，而是return我们自己
return的这个内容。
函数都有prototype对象，这个属性没啥用。直到这个函数是一个
构造函数的时候，prototype非常有用，因为它的prototype就是
它new出来的对象的__proto__是一样的，而__proto__可以原型
链查找。所以我们就可以把一些公共的东西写在prototype里，
把方法写在prototype里面，这样方法就是共用的













