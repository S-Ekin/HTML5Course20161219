题目一、
function Person() {
}
Person.teacher = "max";
var ww = new Person();
console.log(ww.teacher);

题目二、
function Person() {
    this.name = "max";
}
Person();
console.log(Person.name);//
console.log(name);//
undefined, undefined
person max
undefined, max
undefined, 报错


原型链，内置构造函数，继承；

1、上升到面向对象
我们之前是面向过程的思维水平，要提升到面向对象的思维方式。
换句话说，就是面向对象干嘛的？我们提示一下。
“什么时候你就会编程了”
“当你学会抽象的时候，你就会了”

面向对象实际上就是把问题抽象化的一个途径。
我们用3个实例，用心感受！！

1.1 红绿灯
页面上有10个红绿灯，彼此独立，点一下换一种灯。
红-->黄-->绿

你会发现每个红绿灯，彼此独立，功能一样。想都别想，
一定要用面向对象来做！

我们不希望构造函数承担太多的语句，希望构造函数整洁
一些。所以可以让构造函数的prototype来分担一下。
在构造函数里面，主动调用它的方法



面向对象是什么？为什么要用面向对象
每个小女孩都是独立的个体，有自己有x, y, speed, direction.
自己的属性只和自己的行为有关系，和别人没有关系。换句话说，
自己的move方法，只看自己的x,y,speed,direction, 不看别人
的属性。这就是自治思维。每个小女孩知道自己要移动，要迈步子，
要撞墙反弹，相当于我们new出了“智能”的元素，自己能管理自己

实际上，这个叫做属性管理，属性只被自己看见，自己只用自己
的属性，别人管不着，自己也管不着别人

面向对象本质上是抽象、是封装，把一些具体的元素抽象出来
，看他们能干什么，什么相同，什么不同。相同的直接写死，
不同的做参数。比如 x, y, speed， 这些做参数
